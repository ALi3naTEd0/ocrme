name: Android Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'
        required: true
        type: string
        default: '0.1.0-1'
  workflow_call:
    inputs:
      version:
        required: true
        type: string
        description: 'Version number'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Configure Gradle
        run: |
          mkdir -p $HOME/.gradle
          echo "org.gradle.java.home=$JAVA_HOME" >> $HOME/.gradle/gradle.properties
          echo "Current gradle.properties:"
          cat $HOME/.gradle/gradle.properties

      # Improved cache strategy with correct dependency paths
      - name: Cache Gradle and Android dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
            ~/.android/cache
          key: gradle-android-${{ runner.os }}-${{ hashFiles('**/*.gradle*', 'android/gradle/wrapper/gradle-wrapper.properties') }}-${{ github.sha }}
          restore-keys: |
            gradle-android-${{ runner.os }}-${{ hashFiles('**/*.gradle*', 'android/gradle/wrapper/gradle-wrapper.properties') }}-
            gradle-android-${{ runner.os }}-

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.1'
          channel: 'stable'
          cache: true # Enable Flutter caching

      # Cache pub dependencies separately (more efficient than general cache)
      - name: Cache pub dependencies
        uses: actions/cache@v4
        with:
          path: |
            ${{ env.PUB_CACHE }}
            .dart_tool/
          key: pub-dependencies-${{ runner.os }}-${{ hashFiles('pubspec.lock') }}
          restore-keys: |
            pub-dependencies-${{ runner.os }}-

      # Download tessdata files only if not already cached
      - name: Cache Tessdata Files
        id: cache-tessdata
        uses: actions/cache@v4
        with:
          path: assets/tessdata
          key: tessdata-${{ hashFiles('**/pubspec.yaml') }}

      - name: Download Tessdata
        if: steps.cache-tessdata.outputs.cache-hit != 'true'
        run: |
          mkdir -p assets/tessdata
          
          # Download essential language files (logo.png already exists in repo)
          curl -L -o assets/tessdata/eng.traineddata https://github.com/tesseract-ocr/tessdata_fast/raw/main/eng.traineddata
          curl -L -o assets/tessdata/spa.traineddata https://github.com/tesseract-ocr/tessdata_fast/raw/main/spa.traineddata
      
      # Ensure tessdata is included in Android assets
      - name: Copy Tessdata to Android Assets
        run: |
          # Create Android assets dir if it doesn't exist
          mkdir -p android/app/src/main/assets/tessdata
          
          # Copy tessdata from assets to the Android assets directory
          cp -r assets/tessdata/* android/app/src/main/assets/tessdata/
          
          # Print the contents of the Android assets directory
          echo "Android tessdata contents:"
          ls -la android/app/src/main/assets/tessdata/

      # Get dependencies before building
      - name: Install Flutter dependencies
        run: flutter pub get

      # Add icon handling for Android builds
      - name: Prepare Android Icons
        run: |
          echo "Preparing Android icons from logo file"
          mkdir -p android/app/src/main/res/drawable
          
          # Use the existing logo.png file to create appropriate icons
          # Check if imagemagick is installed
          if ! command -v convert &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y imagemagick
          fi
          
          # Create proper Android launcher icons in various sizes
          ICON_SIZES=("36" "48" "72" "96" "144" "192")
          DENSITY_NAMES=("ldpi" "mdpi" "hdpi" "xhdpi" "xxhdpi" "xxxhdpi")
          
          for i in "${!ICON_SIZES[@]}"; do
            SIZE=${ICON_SIZES[$i]}
            DENSITY=${DENSITY_NAMES[$i]}
            
            mkdir -p "android/app/src/main/res/mipmap-$DENSITY"
            convert -resize "${SIZE}x${SIZE}" assets/logo.png "android/app/src/main/res/mipmap-$DENSITY/ic_launcher.png"
            
            # Also create rounded icons for modern Android
            convert assets/logo.png -resize "${SIZE}x${SIZE}" -background white -alpha remove -alpha off \
              \( +clone -background black -shadow 40x8+0+8 \) +swap -background none \
              -layers merge +repage -crop ${SIZE}x${SIZE}+0+0 \
              "android/app/src/main/res/mipmap-$DENSITY/ic_launcher_round.png"
            
            echo "Created icons for $DENSITY ($SIZE x $SIZE)"
          done
          
          # Create adaptive icon background (plain color matching the app theme)
          convert -size 108x108 xc:"#6A11CB" android/app/src/main/res/drawable/ic_launcher_background.png
          
          # Copy the logo as the foreground (should be transparent background ideally)
          convert assets/logo.png -resize "108x108" android/app/src/main/res/drawable/ic_launcher_foreground.png
          
          echo "Android icons created successfully"

      # First check if keystore secrets exist, otherwise generate a debug keystore
      - name: Set up keystore
        run: |
          if [ "${{ secrets.UPLOAD_KEYSTORE }}" != "" ] && [ "${{ secrets.KEYSTORE_PASSWORD }}" != "" ]; then
            echo "Using provided keystore from secrets"
            echo "${{ secrets.UPLOAD_KEYSTORE }}" | base64 --decode > android/app/upload-keystore.jks
            echo "storePassword=${{ secrets.KEYSTORE_PASSWORD }}" >> android/key.properties
            echo "keyPassword=${{ secrets.KEY_PASSWORD }}" >> android/key.properties
            echo "keyAlias=${{ secrets.KEY_ALIAS }}" >> android/key.properties
            echo "storeFile=upload-keystore.jks" >> android/key.properties
          else
            echo "Keystore secrets not found. Generating debug keystore..."
            keytool -genkeypair \
              -alias upload \
              -keyalg RSA \
              -keysize 2048 \
              -validity 9125 \
              -keystore android/app/upload-keystore.jks \
              -storepass 'android' \
              -keypass 'android' \
              -dname 'CN=ALi3naTEd0, OU=Mobile Development, O=OCRMe, L=Internet, S=GitHub, C=US'
            echo "storePassword=android" >> android/key.properties
            echo "keyPassword=android" >> android/key.properties
            echo "keyAlias=upload" >> android/key.properties
            echo "storeFile=upload-keystore.jks" >> android/key.properties
          fi

      # Add this step to modify build.gradle before building
      - name: Fix Build Configuration
        run: |
          echo "Fixing Android build.gradle configuration for split APKs..."
          
          # Check if the build.gradle file exists
          if [ -f "android/app/build.gradle" ]; then
            # Remove or comment out any conflicting ndk block that specifies abiFilters
            sed -i '/ndk {/,/}/s/^/\/\/ /' android/app/build.gradle
            
            # Add a properly structured ABI splits configuration
            cat >> android/app/build.gradle << 'EOF'
            
            android {
                // Add this configuration for split APKs without conflicting with NDK
                splits {
                    abi {
                        enable true
                        reset()
                        include "armeabi-v7a", "arm64-v8a", "x86_64"
                        universalApk true
                    }
                }
            }
            EOF
            
            echo "Android build.gradle modified successfully"
          else
            echo "Warning: android/app/build.gradle not found!"
          fi

      # Optimize build by using --no-pub option since we already ran pub get
      - name: Build Universal APK
        run: |
          flutter build apk --release --no-pub
          mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/OCRMe_${{ inputs.version || github.event.inputs.version }}.apk
          
      - name: Upload APK Artifact
        uses: actions/upload-artifact@v4
        with:
          name: OCRMe-universal
          path: build/app/outputs/flutter-apk/OCRMe_${{ inputs.version || github.event.inputs.version }}.apk
          
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            aapt \
            android-sdk-build-tools

      # Use split per ABI without repeating pub get
      - name: Build Split APKs
        run: |
          flutter build apk --release --split-per-abi --no-pub
          
          # Find aapt location and use full path
          AAPT_PATH=$(which aapt)
          echo "Using aapt from: $AAPT_PATH"
          
          # Verify package ID
          PACKAGE_ID=$($AAPT_PATH dump badging build/app/outputs/flutter-apk/app-arm64-v8a-release.apk | grep package | awk '{print $2}' | sed "s/name='\([^']*\)'.*/\1/")
          echo "Package ID: $PACKAGE_ID"
          [ "$PACKAGE_ID" = "com.ali3nated0.ocrme" ] || exit 1
          
          # Rename APKs
          mv build/app/outputs/flutter-apk/app-arm64-v8a-release.apk build/app/outputs/flutter-apk/OCRMe_${{ inputs.version || github.event.inputs.version }}_arm64-v8a.apk
          mv build/app/outputs/flutter-apk/app-armeabi-v7a-release.apk build/app/outputs/flutter-apk/OCRMe_${{ inputs.version || github.event.inputs.version }}_armeabi-v7a.apk
          mv build/app/outputs/flutter-apk/app-x86_64-release.apk build/app/outputs/flutter-apk/OCRMe_${{ inputs.version || github.event.inputs.version }}_x86_64.apk

      # Upload individual artifacts matching RateMe pattern
      - name: Upload arm64-v8a APK
        uses: actions/upload-artifact@v4
        with:
          name: OCRMe-arm64-v8a
          path: build/app/outputs/flutter-apk/OCRMe_${{ inputs.version || github.event.inputs.version }}_arm64-v8a.apk

      - name: Upload armeabi-v7a APK
        uses: actions/upload-artifact@v4
        with:
          name: OCRMe-armeabi-v7a
          path: build/app/outputs/flutter-apk/OCRMe_${{ inputs.version || github.event.inputs.version }}_armeabi-v7a.apk

      - name: Upload x86_64 APK
        uses: actions/upload-artifact@v4
        with:
          name: OCRMe-x86_64
          path: build/app/outputs/flutter-apk/OCRMe_${{ inputs.version || github.event.inputs.version }}_x86_64.apk
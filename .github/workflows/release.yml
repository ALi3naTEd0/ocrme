name: Release Build

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number'
        required: true
        type: string
        default: '0.1.0-1'
      platforms:
        description: "Platforms to build"
        required: true
        type: choice
        options:
          - all
          - android
          - windows
          - linux
          - macos
          - flatpak
      release_type:
        description: "Release type"
        required: true
        type: choice
        options: 
          - release
          - draft
        default: 'draft'
  push:
    tags:
      - 'v*'  # matches any version tag starting with 'v'

permissions:
  contents: write

jobs:
  # STEP 1: BUILD PHASE - Build all required platforms
  android-build:
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.platforms == 'all' || inputs.platforms == 'android')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    uses: ./.github/workflows/android.yml
    secrets: inherit
    with:
      version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}

  linux-build:
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.platforms == 'all' || inputs.platforms == 'linux')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    uses: ./.github/workflows/linux.yml
    secrets: inherit
    with:
      version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}

  windows-build:
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.platforms == 'all' || inputs.platforms == 'windows')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    uses: ./.github/workflows/windows.yml
    secrets: inherit
    with:
      version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}

  macos-build:
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.platforms == 'all' || inputs.platforms == 'macos')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    uses: ./.github/workflows/macos.yml
    secrets: inherit
    with:
      version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}

  flatpak-build:
    if: |
      (github.event_name == 'workflow_dispatch' && (inputs.platforms == 'all' || inputs.platforms == 'flatpak')) ||
      (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    uses: ./.github/workflows/flatpak.yml
    secrets: inherit
    with:
      version: ${{ github.event_name == 'workflow_dispatch' && inputs.version || github.ref_name }}

  # STEP 2: CREATE RELEASE - Create the GitHub release and attach artifacts
  create-release:
    name: Create Release
    needs: [android-build, linux-build, windows-build, macos-build, flatpak-build]
    if: |
      !cancelled() && !failure() &&
      (needs.android-build.result == 'success' || needs.android-build.result == 'skipped') &&
      (needs.linux-build.result == 'success' || needs.linux-build.result == 'skipped') &&
      (needs.windows-build.result == 'success' || needs.windows-build.result == 'skipped') &&
      (needs.macos-build.result == 'success' || needs.macos-build.result == 'skipped') &&
      (needs.flatpak-build.result == 'success' || needs.flatpak-build.result == 'skipped')
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.VERSION }}
      release_url: ${{ steps.set_release_url.outputs.url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Get Version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> "$GITHUB_OUTPUT"
          else
            echo "VERSION=${GITHUB_REF#refs/tags/v}" >> "$GITHUB_OUTPUT"
          fi
          echo "Using version: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.version || github.ref_name }}"
          
      - name: Delete existing draft release with same tag
        if: github.event_name == 'workflow_dispatch'
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG_NAME="${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version) || github.ref }}"
          # Check if release exists
          RELEASE_ID=$(gh api repos/${{ github.repository }}/releases/tags/$TAG_NAME --jq '.id' 2>/dev/null || echo "")
          if [ ! -z "$RELEASE_ID" ]; then
            echo "Existing release found with ID: $RELEASE_ID. Deleting it."
            gh api -X DELETE repos/${{ github.repository }}/releases/$RELEASE_ID
          else
            echo "No existing release found with tag $TAG_NAME."
          fi

      - name: Create Release Notes
        id: create_release_notes
        run: |
          # Extract release notes from CHANGELOG.md or use default message
          if [ -f "CHANGELOG.md" ]; then
            # Get content between ## [Unreleased] and next ##
            notes=$(awk '/^## \[Unreleased\]/{flag=1;next}/^## /{if(flag==1)exit}flag' CHANGELOG.md)
            if [ -z "$notes" ]; then
              notes="OCR application for extracting text from images."
            fi
          else
            notes="OCR application for extracting text from images."
          fi
          
          # Create full release notes with template
          cat > release_notes.md << EOF
          # OCRMe ${{ steps.get_version.outputs.VERSION }}
          
          $notes
          
          ## Key Features
          - Clean, modern UI
          - Extract text from images with a single click
          - Language support for English and Spanish by default
          - Additional languages available for download
          - Confidence scoring for OCR results
          - Auto-correct common OCR errors
          
          ## Installation
          
          ### Android
          - Download the APK for your device architecture (arm64-v8a recommended for most modern phones)
          - Enable installation from unknown sources in settings
          - Open the APK to install
          
          ### Windows
          - Download the installer (.exe) file and run it
          - Or use the portable ZIP version - no installation needed
          
          ### macOS
          - Download the .dmg file
          
          ### Linux
          - Download the AppImage for a portable, clickable executable
          - Or use the .deb, .rpm, or Flatpak packages for system integration
          EOF
          
          echo "NOTES_PATH=release_notes.md" >> "$GITHUB_OUTPUT"

      - name: Create Dist Directory
        run: mkdir -p dist

      # Optimize artifacts download with pattern and merge
      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true
          pattern: '*'

      - name: Organize Artifacts
        run: |
          echo "Artifact directory contents before organization:"
          ls -la dist/
          
          # Only move nested files if they exist
          if find dist -mindepth 2 -type f | grep -q .; then
            echo "Moving nested files to root..."
            find dist -mindepth 2 -type f -exec mv -t dist/ {} + 2>/dev/null
          else
            echo "No nested files to move"
          fi
          
          # Clean up empty directories
          find dist -type d -empty -delete 2>/dev/null || echo "No empty dirs to remove"
          
          echo "Final dist content:"
          ls -lh dist/

      # Create release with proper notes and artifacts
      - name: Create Release and Upload Assets
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version) || github.ref }}
          name: OCRMe ${{ steps.get_version.outputs.VERSION }}
          body_path: ${{ steps.create_release_notes.outputs.NOTES_PATH }}
          draft: ${{ github.event.inputs.release_type == 'draft' }}
          prerelease: false
          files: |
            dist/*
          fail_on_unmatched_files: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Release URL
        id: set_release_url
        run: |
          REPO_OWNER="${GITHUB_REPOSITORY_OWNER}"
          REPO_NAME="${GITHUB_REPOSITORY#*/}"
          VERSION="${{ steps.get_version.outputs.VERSION }}"
          TAG_NAME="${{ github.event_name == 'workflow_dispatch' && format('v{0}', github.event.inputs.version) || github.ref_name }}"
          RELEASE_URL="https://github.com/${REPO_OWNER}/${REPO_NAME}/releases/tag/${TAG_NAME}"
          echo "Setting release URL to: $RELEASE_URL"
          echo "url=$RELEASE_URL" >> "$GITHUB_OUTPUT"

  # STEP 3: UPDATE DOCUMENTATION - Update docs with new version links
  update-docs:
    name: Update Documentation
    needs: create-release
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.release_type == 'release'
    runs-on: ubuntu-latest
    steps:
      - name: Verify Release Type
        run: |
          echo "Running docs update because:"
          echo "Event type: ${{ github.event_name }}"
          echo "Release type: ${{ github.event.inputs.release_type }}"
          
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"

      - name: Update Documentation
        run: |
          VERSION="${{ needs.create-release.outputs.version }}"
          TODAY=$(date +"%Y-%m-%d")
          
          # Update version numbers in README where they exist
          if [ -f "README.md" ]; then
            # Various version pattern replacements
            sed -i "s|/download/v[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+/|/download/v${VERSION}/|g" README.md
            sed -i "s|OCRMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.exe|OCRMe_${VERSION}.exe|g" README.md
            sed -i "s|OCRMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.dmg|OCRMe_${VERSION}.dmg|g" README.md
            sed -i "s|OCRMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.AppImage|OCRMe_${VERSION}.AppImage|g" README.md
            sed -i "s|OCRMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+_amd64\.deb|OCRMe_${VERSION}_amd64.deb|g" README.md
            sed -i "s|OCRMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+_x86_64\.rpm|OCRMe_${VERSION}_x86_64.rpm|g" README.md
            sed -i "s|OCRMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+\.flatpak|OCRMe_${VERSION}.flatpak|g" README.md
            sed -i "s|OCRMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+_portable\.zip|OCRMe_${VERSION}_portable.zip|g" README.md
          fi
          
          # Update CHANGELOG if it exists
          if [ -f "CHANGELOG.md" ]; then
            sed -i "s/## \[Unreleased\]/## [Unreleased]\n\n## [${VERSION}] - ${TODAY}/" CHANGELOG.md
          fi
          
          # Update website version (similar to RateMe workflow)
          if [ -d "website" ]; then
            if [ -f "website/index.html" ]; then
              # Update version in index.html
              sed -i "s/OCRMe v[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+/OCRMe v${VERSION}/g" website/index.html
              # Update download links
              sed -i "s/OCRMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+/OCRMe_${VERSION}/g" website/index.html
            fi

            if [ -f "website/download.html" ]; then
              # Update version in download.html
              sed -i "s/OCRMe v[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+/OCRMe v${VERSION}/g" website/download.html
              # Update download links
              sed -i "s/OCRMe_[0-9]\+\.[0-9]\+\.[0-9]\+-[0-9]\+/OCRMe_${VERSION}/g" website/download.html
              # Update release date
              sed -i "s/Released: [0-9]\{4\}-[0-9]\{2\}-[0-9]\{2\}/Released: ${TODAY}/g" website/download.html
            fi
          fi
          
          # Commit changes if any
          if git diff --quiet; then
            echo "No changes to commit"
            exit 0
          fi
          
          git add -A
          git commit -m "docs: update documentation for version ${VERSION}"
          git push origin HEAD:main

  # STEP 4: DEPLOY WEBSITE - Update and deploy website with new version
  deploy-website:
    name: Deploy Website
    needs: [create-release, update-docs]
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.release_type == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: main  # Get the updated docs from main branch
      
      - name: Check if website directory exists
        id: check_website
        run: |
          if [ -d "website" ]; then
            echo "has_website=true" >> $GITHUB_OUTPUT
          else
            echo "has_website=false" >> $GITHUB_OUTPUT
          fi

      - name: Deploy to GitHub Pages
        if: steps.check_website.outputs.has_website == 'true'
        uses: JamesIves/github-pages-deploy-action@v4
        with:
          branch: gh-pages
          folder: website
          clean: true
